#include <iostream>
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>     /* srand, rand */
#include <time.h>       /* time */

#include "BoidAgentData.h"
#include "BinTree.h"
#include "BinTree.cpp"

#include "add.h"
#include "mul.h"
#include "div.h"

using namespace std;

int random(int a) {
	int i = rand() % a; /* A random integer between 1 and 10 */;
	return (float)i;
}

float randomp(int a) {
	int i = rand() % a + 1; /* A random integer between 1 and 10 */;
	return (float)i;
}

void set_xvals(int values) {
	int* xvals = new int[values];
	for (int i = 0; i < values; i++) {
		xvals[i] = i;
	}
}

void set_yvals(int values) {
	int* yvals = new int[values];
	for (int i = 0; i < values; i++) {
		yvals[i] = i;
	}
}

// This is the fitness function
/*float fitness_function(S_Expression* s, int* hits) {

	float total = 0;
	*hits = 0;

	for (int k = 0; k < number_of_fitness_cases; ++k) {
		position.x = k;
		float y = s->eval();
		float diff = fabs(yvals[k] - y);
		if (diff <= 0.001)
			*hits += 1;
		total += diff;
	}

	return total;
}*/

int main(int argc, char** argv) {
	/*int* xvals = new int[0];
	int* yvals = new int[0];
	set_xvals(100);
	set_yvals(100);*/

	srand(time(NULL)); //initialize random seed

	BoidAgentData test;	

	char operators[3],op;
	operators[0] = '+';
	operators[1] = '*';
	operators[2] = '/';

	//strcpy(op, operators[random(3)]);
	op = operators[random(3)];
	//cout << op<<endl;

	BinTree<char> btree(op);

	int x = randomp(100);
	test.position.x = x;
	static_cast<char>(x);
	btree.insert(x);


	int y = randomp(100);
	test.position.y = y;
	static_cast<char>(y);
	btree.insert(y);

	//test.acceleration = { randomp(100), randomp(100) };

	
	

	cout << "PreOrder: ";
	btree.preOrder();
	cout << endl;
	cout << "InOrder: ";
	btree.inOrder();
	cout << endl;
	cout << "PostOrder: ";
	btree.postOrder();



	// Specify your terminal set  
	// Specify your function set  
	// Precalculate your set of fitness test cases  
	// Declare the GP object  GP gp (fitness_function, population_size);  
	// Specify any non-default GP parameters  
	// Run the evolution!  gp.go (number_of_generations);  
	// Examine results

	/*delete xvals[];
	delete yvals[];*/
}